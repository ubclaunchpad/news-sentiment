name: Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    paths-ignore: 
      - '**.md'
#     branches: [ main ]

env:
  CI: true

jobs:
  # Lint - Are we using this?
  lint:
   runs-on: ubuntu-latest
   steps:
     - uses: actions/checkout@v1
     - uses: actions/setup-go@v1
       with: { go-version: '1.15' } # Check with team which version of Go we're using
     - name: Run linters
       run: make lint
  
  # Build
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-go@v1
      with: { go-version: '1.15' } # Check with team which version of Go we're using
#     - name: Set up Go 1.x
#       uses: actions/setup-go@v2
#       with:
#         go-version: ^1.13

#     - name: Check out code into the Go module directory
#       uses: actions/checkout@v2

#     - name: Get dependencies
#       run: |
#         go get -v -t -d ./...
#         if [ -f Gopkg.toml ]; then
#             curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
#             dep ensure
#         fi

#     - name: Build
#       run: go build -v .

#     - name: Test
#       run: go test -v .

  # Unit Tests for Ubuntu
    test-ubuntu:
      runs-on: ubuntu-latest
      needs: [ build, lint ]
      steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-go@v1
        with: { go-version: '1.15' }
      - name: Install Docker dependencies # Installs necessary dependencies from docker
        
      - name: Start test container # Init test container
      - name: Run tests # Run tests
        
  # Unit Tests for Windows
    test-windows:
      runs-on: windows-latest
      needs: [ build, lint ]
      steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-go@v1
        with: { go-version: '1.15' }
      - name: Run tests
        run: |
          go test -short -coverprofile="coverage.txt" ./cfg ./client ./cmd ./common ./local ./provision
      - uses: codecov/codecov-actions@v1
        with:
          file: coverage.txt
          flags: test-windows
          fail_ci_if_error: true      

  # Unit Tests for MacOS
    test-macos:
      runs-on: macos-latest
      needs: [ build, lint ]
      steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-go@v1
        with: { go-version: '1.15' }
      - name: Run tests
      
  # Test Integration

  # Release
    needs: [ build, lint, test-ubuntu, test-windows, test-macos ]
       
